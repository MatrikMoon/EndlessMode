using FlowPlaylists.UI;
using IllusionPlugin;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace FlowPlaylists
{
    public class Plugin : IPlugin
    {
        private Queue<BeatmapLevelSO> playlist;

        public string Name => "PlaylistFlow";
        public string Version => "0.0.1";

        public void OnApplicationStart()
        {
            SceneManager.activeSceneChanged += SceneManagerOnActiveSceneChanged;
            SceneManager.sceneLoaded += SceneManager_sceneLoaded;
        }

        private void SceneManagerOnActiveSceneChanged(Scene arg0, Scene arg1)
        {
            if (arg1.name == "MenuCore")
            {
                var standardLevelDetailViewController = Resources.FindObjectsOfTypeAll<StandardLevelDetailViewController>().FirstOrDefault();
                standardLevelDetailViewController.didPressPlayButtonEvent += didPressPlay;

                var subMenu = CustomUI.Settings.SettingsUI.CreateSubMenu(Name);
                var showTimer = subMenu.AddBool("Show Timer");
                var timeSlider = subMenu.AddSlider("Playlist Duration", "Duration of the playlist generated by the random button", 0, 60 * 1000 * 60, 1, true);

                var gameOption = CustomUI.GameplaySettings.GameplaySettingsUI.CreateToggleOption("Enable FlowPlaylists", "When you press play, songs after the song you select will be stitched together into one");

                Config.LoadConfig();
                gameOption.GetValue = Config.Enabled;
                gameOption.OnToggle += (b) =>
                {
                    Config.Enabled = b;
                    Config.SaveConfig();
                };
            }
            else if (Config.Enabled && arg1.name == "GameCore")
            {
                var stitcher = new GameObject("SongStitcher").AddComponent<SongStitcher>();
                stitcher.Playlist = playlist;

                CountdownPanel.Create(playlist.ToList());
            }
        }

        private void didPressPlay(StandardLevelDetailViewController standardLevelDetailViewController)
        {
            var currentView = Resources.FindObjectsOfTypeAll<LevelPackLevelsTableView>().First();
            var currentPack = currentView.GetField<IBeatmapLevelPack>("_pack");
            var currentCollection = currentPack.beatmapLevelCollection;

            var newCollection = currentCollection.beatmapLevels.SkipWhile(x => x.levelID != standardLevelDetailViewController.selectedDifficultyBeatmap.level.levelID);

            playlist = new Queue<BeatmapLevelSO>(newCollection.Select(x => (BeatmapLevelSO)x).ToList());

            newCollection.ToList().ForEach(x => Logger.Warning($"NEXT SONG IN LIST: {x.songName}"));
        }

        private void SceneManager_sceneLoaded(Scene arg0, LoadSceneMode arg1)
        {
        }

        public void OnApplicationQuit()
        {
            SceneManager.activeSceneChanged -= SceneManagerOnActiveSceneChanged;
            SceneManager.sceneLoaded -= SceneManager_sceneLoaded;
        }

        public void OnLevelWasLoaded(int level)
        {

        }

        public void OnLevelWasInitialized(int level)
        {
        }

        public void OnUpdate()
        {
        }

        public void OnFixedUpdate()
        {
        }
    }
}
